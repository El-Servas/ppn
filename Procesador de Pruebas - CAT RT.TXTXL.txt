Representación Textual del archivo de Excel: "Procesador de Pruebas - CAT RT.xlsm"
Fecha y hora de generación: 09/09/2016 12:13:43 p.m.

Resumen
=======

 * Hojas: 1

 * Nombres Definidos: 2

 * Módulos de Visual Basic: 6

 * Líneas de código VB: 177

Detalle
=======

Hojas:
 [Consola]

Contenido:
[Consola]
[B2] \Procesador de Pruebas para CAT Revolvente Pago Tradicional\
[B3] \v2.0\
[B5] \Requiere los siguientes archivos en la misma carpeta:\
[B7] \* CAT_RT.xlsm\
[B8] \* Data.xlsx\
[B13] \Mapeo de Columnas en Archivo de Datos\
[B15] (MAPEO_START) \Parámetro\
[B16] \i.Monto_Línea\
[B17] \i.Tasa_Anual\
[B18] \i.Tasa_IVA_Interes\
[B19] \i.Comisiones_Iniciales\
[B20] \i.Comisión_Redisposición\
[B21] \i.Plazo_En_Meses\
[C7] \v1.1\
[C8] \Con el formato adecuado\
[C15] \Columna\
[C16] \OFERTA\
[C17] \TASA\
[C18] \IVA\
[C21] \PLAZO\
[D15] \Valor\
[D19] \240\
[D20] \120\
[F13] \Resultados\
[F15] (RESULTADOS_START) \Parámetro\
[Consola]
[F16] \o.CAT\

Nombres:
 [MAPEO_START] =Consola!$B$15
 [RESULTADOS_START] =Consola!$F$15

Nombre del proyecto VB: [VBAProject]

Módulos VBA:
 [ThisWorkbook] Tipo: 100
 [Calcula] Tipo: 1
 [Sheet1] Tipo: 100
 [Utils] Tipo: 1
 [Stopwatch] Tipo: 1
 [Esqueleto] Tipo: 1

Codigo:
[ThisWorkbook] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Calcula] 123 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Private Const COL_COMISIÓN = 2
Private Const COL_MONTO = 3
Private Const COL_TASA = 4
Private Const COL_PLAZO = 5
Private Const COL_IVA = 6
Private Const COL_CAT = 8

Private Const PARAM_MONTO = "i.Monto_Línea"
Private Const PARAM_TASA = "i.Tasa_Anual"
Private Const PARAM_IVA = "i.Tasa_IVA_Interes"
Private Const PARAM_COMISIÓN = "i.Comisiones_Iniciales"
Private Const PARAM_COM_REDISP = "i.Comisión_Redisposición"
Private Const PARAM_PLAZO = "i.Plazo_En_Meses"
Private Const PARAM_CAT = "o.CAT"

Private Const ERROR_CONSTANT = "NA*"
Private HuboError As Long
Public Mensaje As String

Private Const FILENAME_CALC_BOOK = "CAT_RT.xlsm"
Private Const FILENAME_DATA_BOOK = "DATA.xlsx"

Private wbCalc As Workbook
Private wsCalc As Worksheet

Private wbData As Workbook
Private wsData As Worksheet

Dim ix As Long
Dim nReg As Long

Private RunWhen As Double
Private Const RUN_INTERVAL_SECONDS = 1
Private Const RUN_PROCEDURE = "ActualizaStatus"

Sub ConfiguraAmbiente()
    Dim stRutaLocal As String
    stRutaLocal = ThisWorkbook.Path & Application.PathSeparator
    
    'Libro de cálculo
    Set wbCalc = Workbooks.Open(stRutaLocal & FILENAME_CALC_BOOK)
    Set wsCalc = wbCalc.Worksheets(1)
    
    'Libro de Datos
    Set wbData = Workbooks.Open(stRutaLocal & FILENAME_DATA_BOOK)
    Set wsData = wbData.Worksheets(1)
    
    ThisWorkbook.Activate
    
    'Filas totales
    nReg = wsData.Cells(1).CurrentRegion.Rows.Count
    HuboError = 0
    Mensaje = ""
End Sub

Sub CorrerPruebas()
    ProgramarActualizacionStatus
    For ix = 2 To nReg
        
        If wsData.Cells(ix, COL_CAT) = "" Then
            wsCalc.Range(PARAM_COMISIÓN) = wsData.Cells(ix, COL_COMISIÓN).Value
            wsCalc.Range(PARAM_MONTO) = wsData.Cells(ix, COL_MONTO).Value
            wsCalc.Range(PARAM_TASA) = wsData.Cells(ix, COL_TASA) / 100
            wsCalc.Range(PARAM_PLAZO) = wsData.Cells(ix, COL_PLAZO)
            wsCalc.Range(PARAM_IVA) = wsData.Cells(ix, COL_IVA)
            
            If Not IsError(wsCalc.Range(PARAM_CAT)) Then
                wsData.Cells(ix, COL_CAT) = wsCalc.Range(PARAM_CAT)
            Else
                HuboError = HuboError + 1
                With wsData.Cells(ix, COL_CAT)
                    .Value = ERROR_CONSTANT
                    .Font.Color = -16776961
                End With
            End If
        End If
        DoEvents
    Next
    If HuboError Then Mensaje = "PRECAUCIÓN: Hubo (" & HuboError & ") registros con error."
End Sub

Sub ApagarAmbiente()
    ApagarActualizacionStatus
 
    wbCalc.Close False
    Set wbCalc = Nothing
    
    wbData.Activate
    Set wbData = Nothing
End Sub

Sub ProgramarActualizacionStatus()
    RunWhen = Now + TimeSerial(0, 0, RUN_INTERVAL_SECONDS)
    Application.OnTime EarliestTime:=RunWhen, Procedure:=RUN_PROCEDURE, Schedule:=True
End Sub

Sub ApagarActualizacionStatus()
    On Error Resume Next
    Application.OnTime EarliestTime:=RunWhen, Procedure:=RUN_PROCEDURE, Schedule:=False
End Sub

Sub ActualizaStatus()
    Dim Status As String
    
    Dim Porcentaje: Porcentaje = ix / nReg * 100
    Dim SegundosTranscurridos As Long: SegundosTranscurridos = Stopwatch.Ellapsed
    Dim TotalEstimado As Long: TotalEstimado = 0: If Porcentaje > 0 Then TotalEstimado = SegundosTranscurridos * 100 / Porcentaje
    Dim SegundosRestantes As Long: SegundosRestantes = TotalEstimado - SegundosTranscurridos
    Dim Velocidad: Velocidad = ix / SegundosTranscurridos
    
    Status = "Fila #" & FormatNumber(ix, 0)
    Status = Status & " | " & "" & FormatNumber(Porcentaje, 0) & "%"
    Status = Status & " | " & "" & FormatNumber(Velocidad, 0) & "f/s"
    Status = Status & " | " & "Trans " & FriendlySeconds(SegundosTranscurridos)
    Status = Status & " | " & "Resta " & FriendlySeconds(SegundosRestantes)
    Status = Status & " | " & "Total " & FriendlySeconds(TotalEstimado)
    
    Application.StatusBar = Status
    
    ProgramarActualizacionStatus
End Sub
\\\--- END OF MODULE ---

[Sheet1] 2 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

\\\--- END OF MODULE ---

[Utils] 13 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

'Regresa una cadena con una duración "amigable"
Function FriendlySeconds(Seconds As Long) As String
    Dim strResultado As String: strResultado = FormatNumber(Seconds, 0) + "s"
    If Seconds > 60 Then strResultado = strResultado & " (" + CStr(Int(Seconds / 60)) & ":" & PadCeros(Seconds - (60 * Int(Seconds / 60))) & "m)"
    FriendlySeconds = strResultado
End Function

'Rellena ceros a la izquierda.
Function PadCeros(s)
    PadCeros = Right(String(2, "0") & s, 2)
End Function
\\\--- END OF MODULE ---

[Stopwatch] 11 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Private StartTime As Date

Sub Start()
    StartTime = Now
End Sub

Function Ellapsed() As Long
    Ellapsed = DateDiff("s", StartTime, Now)
End Function
\\\--- END OF MODULE ---

[Esqueleto] 28 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Sub Principal()
On Error GoTo err_hand
    Application.EnableCancelKey = xlErrorHandler
    Application.ScreenUpdating = False
    
    ConfiguraAmbiente
    
    Stopwatch.Start
    CorrerPruebas
    
err_hand:
    ApagarAmbiente
    
    Application.ScreenUpdating = True
    Application.StatusBar = False
    
    AppActivate ThisWorkbook.Application.Caption
    
    If Err.Number = 0 Then
        Dim Msg: Msg = "Proceso terminado en " & FriendlySeconds(Stopwatch.Ellapsed)
        If Calcula.Mensaje <> "" Then Msg = Msg & vbCrLf & vbCrLf & Calcula.Mensaje
        MsgBox Msg
    Else
        Debug.Print Err.Number & " - " & Err.Description
    End If
End Sub
\\\--- END OF MODULE ---


** Fin del proceso de exportación. Proceso realizado en 00 sec.  **
Lib_ExportToTxt [ExportToTxt.xls] v2.13.1
